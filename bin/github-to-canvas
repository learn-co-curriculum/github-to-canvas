#!/usr/bin/env ruby

lib_dir = File.expand_path(File.join(File.dirname(__FILE__), '../lib'))
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'optparse'
require_relative '../lib/github-to-canvas'

options = {}
OptionParser.new do |opts|
  opts.banner = <<-EOBANNER
    GitHub To Canvas
    ====================
    A tool for migrating and aligning GitHub content with the Canvas LMS. Access
    to the Canvas API and a GitHub org required. For configuration and setup, visit
    https://github.com/learn-co-curriculum/github-to-canvas

    Commands:
    github-to-canvas --create-lesson COURSE
    github-to-canvas --create-lesson COURSE [--save]
    github-to-canvas --create-lesson COURSE [--branch BRANCH]
    github-to-canvas --create-lesson COURSE [--branch BRANCH] [--name NAME]
    github-to-canvas --create-lesson COURSE [--branch BRANCH] [--name NAME] [--type TYPE]
    github-to-canvas --create-lesson COURSE [--fis-links]
    github-to-canvas --create-lesson COURSE [--fis-links] [--remove-header-and-footer]
    github-to-canvas --align
    github-to-canvas --align [--branch BRANCH]
    github-to-canvas --align [--only-content]
    github-to-canvas --align [--branch BRANCH] [--fis-links]
    github-to-canvas --info COURSE
    github-to-canvas --version

    
    Run these commands from inside a local GitHub repository. This gem is built for Flatiron School's internal use.
    Some default behaviors assume this, like the default Canvas API path.

    Create and Update Canvas Lessons From Inside a Local GitHub Repo Folder:

    github-to-canvas --create-lesson 154                                                           -> Creates a lesson in course 154, derives the name and type from the local repo
    github-to-canvas --create-lesson 154 --name "Fetch Lab"                                        -> Creates a lesson in course 154 with the provided name, derives the type from the local repo
    github-to-canvas --create-lesson 154 --name "Fetch Lab" --type assignment                      -> Creates an assignment in course 154 with the provided name
    github-to-canvas --create-lesson 154 --name "Fetch Lab" --branch solution                      -> Creates a lesson in course 154 with the provided name, uses the repository's solution branch and derives the type from the local repo
    github-to-canvas --align                                                                       -> Patches existing lessons in Canvas based on the .canvas file  
    github-to-canvas --align --fis-links                                                           -> Patches existing lessons in Canvas based on the .canvas file, adds additional Flatiron School specific HTML and meta-data
    github-to-canvas --align --remove-header-and-footer                                            -> Patches existing lessons in Canvas based on the .canvas file, removes top lesson header before converting to HTML    

    Get Info on a Canvas Course, Lesson or GitHub Repo:
    
    github-to-canvas --query COURSE                                                                -> Displays a course's modules and their lessons in course order as YAML
    github-to-canvas --map YAML                                                                    -> Uses a YAML file created with --query to retrieve repositories that were associated with Canvas lessons using --fis-links. Returns an updated YAML.
    github-to-canvas --read-from-canvas CANVAS_LESSON_URL                                          -> Retrieves a lesson's contents and information from Canvas
    github-to-canvas --read-from-github GITHUB_URL                                                 -> Retrieves the provided GitHub markdown file, converted into HTML

    Create and Update Canvas Lessons Using Remote GitHub Repositories:

    github-to-canvas --create-from-github GITHUB_URL --course COURSE_ID --type TYPE                -> Creates a lesson in the provided course using the remote GitHub URL. Source must be from a public repo.
    github-to-canvas --align-from-github GITHUB_URL --course COURSE_ID --id LESSON_ID --type TYPE  -> Updates a lesson in the provided course using the remote GitHub URL. Source must be from a public repo.

    Create and Update Canvas Courses From YAML:

    github-to-canvas --build-course YAML_FILE                                                     -> Uses the provided YAML file to create a course, add modules and populate them with lessons using remote GitHub repositories
    github-to-canvas --add-to-course YAML_FILE --course                                           -> Uses a YAML file to a modules and lessons to an existing course.
    github-to-canvas --update-course YAML_FILE                                                    -> Uses a YAML file to update lessons using their associated GitHub repositories (ignores module/course structure in YAML file)

  EOBANNER

  opts.on("-cCOURSE", "--create-lesson COURSE", 
          "Creates a new canvas lesson, converting the local repository's README.md to HTML. Adds .canvas file to remote repository") do |course| 
            options[:create_lesson] = true
            options[:course_id] = course
          end
  opts.on("-bBRANCH", "--branch BRANCH", 
          "Sets the repository branch used for lesson creation") do |branch| 
            options[:branch] = branch
          end
  opts.on("-nNAME", "--name NAME", 
          "Sets the name of the new Canvas lesson to be created. If no name is given, repository folder name is used") do |name| 
            options[:name] = name
          end
  opts.on("-tTYPE", "--type TYPE", 
          "Sets the type Canvas lesson to be created (page or assignment). If no type, type decided based on repository structure") do |type| 
            options[:type] = type.downcase
            abort if type == 'quiz' || type == 'discussion'
            # if type == 'page' || type == 'assignment' || type == 'discussion' || type == 'quiz' || type == 'Page' || type == 'Assignment' || type == 'Discussion' || type == 'Quiz'
              
            # else
            #   puts "Invalid type. Defaulting to page"
            #   options[:type] = "page"
            # end
          end
  opts.on("-fFILE", "--file FILE", 
          "Looks for and uses a markdown file in the currentt folder as source for conversion. Default file is README.md. Skips writing .canvas to repository") do |file| 
            options[:file_to_convert] = file
          end
  opts.on("-s", "--save-to-github",
          "Creates a local .canvas file and attempts to commit and push it to the GitHub repository") do |s| 
            options[:save_to_github] = true 
          end
  opts.on("-a", "--align", 
          "Updates a canvas lesson based on the local repository's README.md") do |a|
            options[:align] = true 
          end
  opts.on("-v", "--version",
          "Displays current gem version") do |v|
            options[:version] = true
          end
  opts.on("-l", "--fis-links",
          "Adds additional Flatiron School HTML after markdown conversion") do |f|
            options[:fis] = true
          end
  opts.on("-g", "--git-links",
          "Adds additional GitHub after markdown conversion") do |f|
            options[:git_links] = true
          end
  opts.on("--aaq", 
          "Adds AAQ flag to HTML header appended with --fis-links") do |aaq|
            options[:aaq] = aaq
          end
  opts.on("--prework", 
          "Adds prework flag to HTML header appended with --fis-links") do |prework|
            options[:prework] = prework
          end
  opts.on("--forkable",
          "Used with --fis-links, adds fork button to HTML header injected into Canvas lesson") do |remote|
            options[:forkable] = true
          end
  opts.on("-r", "--remove-header-and-footer",
          "Removes top lesson header and any Learn.co specific footer links before converting to HTML") do |r|
            options[:remove_header_and_footer] = true
          end
  opts.on("-d", "--ds-assignment",
          "Configure the following options: --header-only --illumidesk --grading-type points --submission-type external_tool --points-possible 0") do
            options[:header_only] = true
            options[:illumidesk] = true
            options[:grading_type] = 'points'
            options[:submission_type] = 'external_tool'
            options[:points_possible] = 0
          end
  opts.on("--header-only",
          "Only generate the HTML header") do
            options[:header_only] = true
          end
  opts.on("--grading-type TYPE", 
          "Sets the 'grading_type' for an assignment. Default: pass_fail. Valid options: pass_fail, percent, letter_grade, gpa_scale, points, not_graded") do |grading_type|
            valid_types = %w[pass_fail percent letter_grade gpa_scale points not_graded]
            unless valid_types.include? grading_type
              raise "Invalid grading type: #{grading_type}"
            end
            options[:grading_type] = grading_type
          end
  opts.on("--submission-type TYPE", 
          "Sets the 'submission_type' for an assignment. Default: online_url. Valid options: online_quiz, none, on_paper, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording, student_annotation") do |submission_type|
            valid_types = %w[online_quiz none on_paper discussion_topic external_tool online_upload online_text_entry online_url media_recording student_annotation]
            unless valid_types.include? submission_type
              raise "Invalid submission type: #{submission_type}"
            end
            options[:submission_type] = submission_type
          end
  opts.on("--points-possible POINTS",
          Integer,
          "Sets the 'points_possible' for an assignment. Default: 1.") do |points_possible|
            options[:points_possible] = points_possible
          end
  opts.on("--illumidesk",
          "Configure assignment to use IllumiDesk for submission") do
            options[:illumidesk] = true
          end
  opts.on("--course COURSE",
          "For align functionality only - updates the HTML content of a lesson using the provided course ID. Use with --id.") do |course_id|
            options[:course_id] = course_id
          end
  opts.on("--id ID",
          "For align functionality only - updates the HTML content of a lesson using the provided assignment or page ID. Use with --course.") do |id|
            options[:id] = id
          end
  opts.on("-o", "--only-content",
          "For align functionality only - updates the HTML content of a lesson without changing the name") do |o|
            options[:only_content] = true
          end
  opts.on("-q COURSE", "--query COURSE", 
          "Displays a course's lessons and assignments") do |course|
            options[:query] = course
          end
  opts.on("--map YAML_FILE", 
          "REQUIRES -f or --file Associates canvas lessons with repositories. Use query to create required YAML file") do |file|
            options[:map] = file
          end
  opts.on("--urls-only", 
          "Use with --map. Outputs repo URLs instead of YAML") do |urls|
            options[:urls_only] = urls
          end
 opts.on("--csv", 
         "Returns a course's lesson struction as CSV") do |csv|
           options[:csv] = csv
         end
  opts.on("--read-from-canvas CANVAS_URL",
          "Retrieves an existing Canvas lesson using the provided URL") do |url|
            options[:read_from_canvas] = url
          end
  opts.on("--read-from-github GITHUB_URL",
          "Converts an existing GitHub Readme to HTML using the provided URL. URL must be for a GitHub markdown file") do |url|
            options[:read_from_github] = url
          end
  opts.on("--create-from-github GITHUB_URL",
          "Creates a new Canvas lesson from a remote GitHub Readme. --course and --type options required") do |url|
            options[:create_from_github] = url
          end
  # opts.on("--create-quiz-from-github GITHUB_URL",
  #         "Creates a new Canvas quiz from a remote GitHub YAML file. --course option required") do |url|
  #           options[:quiz_from_github] = url
  #         end
  opts.on("--align-from-github GITHUB_URL",
          "Aligns an existing Canvas lesson using a remote GitHub Readme. --course, --id, and --type options required") do |url|
            options[:align_from_github] = url
          end
  opts.on("--build-course YAML_FILE", 
          "Creates Canvas course using provided YAML file") do |file|
            options[:build_course] = file
          end
  opts.on("--add-to-course YAML_FILE", 
          "Creates Canvas course using provided YAML file") do |file|
            options[:add_to_course] = file
          end
  opts.on("--update-course-lessons YAML_FILE", 
          "Updates all lessons in a course using remote repos in provided YAML file") do |file|
            options[:update_course_lessons] = file
          end
  opts.on("--clone-from-yaml YAML_FILE", 
          "Iterates over provided course YAML file and clones repos locally") do |file|
            options[:clone_from_yaml] = file
          end
  opts.on("--contains-html", 
          "DEPRECATED: HTML in code blocks handled by Rouge gem.") do |html|
            puts "--contains-html flag is DEPRECATED: HTML in code blocks handled by Rouge gem."
          end
  opts.on("--canvas-to-canvas COURSE",
          "Copies an existing Canvas lesson into another Canvas lesson") do |canvas_to_canvas|
            options[:canvas_to_canvas] = canvas_to_canvas
          end
  opts.on("--build-from-csv CSV",
          "Build a course using a CSV of lesson repos, names, modules, and types") do |csv_build|
            options[:csv_build] = csv_build
          end
  opts.on("--update-from-csv CSV",
          "Update a course using a CSV of lesson repos, names, modules, types, lesson IDs, and course IDs") do |csv_align|
            options[:csv_align] = csv_align
          end
  
  
end.parse!

if options[:version]
  GithubToCanvas.new(mode: 'version',  course_id: nil)
  abort
end

if options[:read_from_canvas]
  GithubToCanvas.new(mode: 'canvas_read', 
                    filepath: options[:read_from_canvas])
  abort
end

if options[:canvas_to_canvas]
  GithubToCanvas.new(mode: 'canvas_copy',
                    filepath: options[:canvas_to_canvas],
                    course_id: options[:course_id], 
                    type: options[:type],
                    id: options[:id]
                    )
  abort
end

if options[:read_from_github]
  GithubToCanvas.new(mode: 'github_read', 
                    filepath: options[:read_from_github],
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    forkable: !!options[:forkable],
                    fis_links: !!options[:fis],
                    aaq: !!options[:aaq],
                    prework: !!options[:prework],
                    header_only: !!options[:header_only])
  abort
end

if options[:create_from_github]
  if options[:course_id] && options[:type]
    GithubToCanvas.new(mode: 'github_create', 
                      filepath: options[:create_from_github], 
                      course_id: options[:course_id], 
                      type: options[:type],
                      name: options[:name],
                      illumidesk: !!options[:illumidesk],
                      grading_type: options.fetch(:grading_type, 'pass_fail'),
                      submission_type: options.fetch(:submission_type, 'online_url'),
                      points_possible: options.fetch(:points_possible, 1),
                      remove_header_and_footer: !!options[:remove_header_and_footer],
                      forkable: !!options[:forkable],
                      fis_links: !!options[:fis],
                      aaq: !!options[:aaq],
                      prework: !!options[:prework],
                      header_only: !!options[:header_only])
  else
    puts 'Canvas course ID and lesson type required. Example: github-to-canvas --create-from-github URL --course ID --type TYPE'
  end
  abort
end

if options[:align_from_github]
  if options[:course_id] && options[:type] && options[:id]
    GithubToCanvas.new(mode: 'github_align', 
                      filepath: options[:align_from_github], 
                      course_id: options[:course_id], 
                      type: options[:type], 
                      id: options[:id],
                      name: options[:name],
                      illumidesk: !!options[:illumidesk],
                      grading_type: options.fetch(:grading_type, 'pass_fail'),
                      submission_type: options.fetch(:submission_type, 'online_url'),
                      points_possible: options.fetch(:points_possible, 1),
                      remove_header_and_footer: !!options[:remove_header_and_footer],
                      forkable: !!options[:forkable],
                      fis_links: !!options[:fis],
                      aaq: !!options[:aaq],
                      prework: !!options[:prework],
                      header_only: !!options[:header_only])
  else
    puts 'Canvas course ID, lesson ID, and type required. Example: github-to-canvas --create-from-github URL --course COURSE_ID --id LESSON_ID --type TYPE'
  end
  abort
end

if options[:query]
  GithubToCanvas.new(mode: 'query',  course_id: options[:query], id: options[:id])
  abort
end

if options[:map]
  GithubToCanvas.new(mode: 'map', 
                      file_to_convert: options[:map],
                      urls_only: !!options[:urls_only],
                      csv: !!options[:csv])
  abort
end

# if options[:csv]
#   GithubToCanvas.new(mode: 'csv', file_to_convert: options[:csv])
#   abort
# end

if options[:csv_build]
  GithubToCanvas.new(mode: 'csv_build', 
                    file_to_convert: options[:csv_build],
                    course_id: options[:course_id],
                    fis_links: !!options[:fis], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    aaq: !!options[:aaq],
                    forkable: !!options[:forkable],
                    branch: options[:branch],
                    git_links: !!options[:git_links],
                    header_only: !!options[:header_only])
  abort
end

if options[:csv_align]
  GithubToCanvas.new(mode: 'csv_align', 
                    file_to_convert: options[:csv_align],
                    course_id: options[:course_id],
                    fis_links: !!options[:fis], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    aaq: !!options[:aaq],
                    forkable: !!options[:forkable],
                    branch: options[:branch],
                    git_links: !!options[:git_links],
                    header_only: !!options[:header_only])
  abort
end

if options[:build_course]
  GithubToCanvas.new(mode: 'build_course', 
                    file_to_convert: options[:build_course],
                    fis_links: !!options[:fis], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    aaq: !!options[:aaq],
                    prework: !!options[:prework],
                    forkable: !!options[:forkable],
                    git_links: !!options[:git_links],
                    header_only: !!options[:header_only])
  abort
end

if options[:add_to_course]
  if options[:course_id]
    GithubToCanvas.new(mode: 'add_to_course', 
                      course_id: options[:course_id], 
                      file_to_convert: options[:add_to_course],
                      fis_links: !!options[:fis], 
                      remove_header_and_footer: !!options[:remove_header_and_footer],
                      forkable: !!options[:forkable],
                      aaq: !!options[:aaq],
                      prework: !!options[:prework],
                      git_links: !!options[:git_links],
                      header_only: !!options[:header_only])
  else
    puts '--course required'
  end
  abort
end

if options[:update_course_lessons]
  GithubToCanvas.new(mode: 'update_course_lessons', 
                    file_to_convert: options[:update_course_lessons],
                    fis_links: !!options[:fis], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    forkable: !!options[:forkable],
                    aaq: !!options[:aaq],
                    prework: !!options[:prework],
                    git_links: !!options[:git_links],
                    header_only: !!options[:header_only])
  abort
end

if options[:clone_from_yaml]
  GithubToCanvas.new(mode: 'clone_course', 
                    file_to_convert: options[:clone_from_yaml])
  abort
end

if !options[:type]
  if Dir.glob("**/*/").empty?
    options[:type] = "page"
    options[:forkable] = false
  else
    options[:type] = "assignment"
  end
end

if !options[:branch]
  options[:branch] = 'master'
end

if !options[:name]
  if options[:file_to_convert]
    markdown = File.read("#{Dir.pwd}/#{options[:file_to_convert]}")
    if markdown.match?(/^# .+?\n\n/)
      options[:name] = markdown.match(/^# .+?\n\n/)[0].strip.gsub("# ","").gsub("#","")
    elsif markdown.match?(/^# .+?\n/)
      options[:name] = markdown.match(/^# .+?\n/)[0].strip.gsub("# ","").gsub("#","")
    else
      options[:name] = options[:file_to_convert]
    end
  else
    markdown = File.read("#{Dir.pwd}/README.md")
    if markdown.match?(/^# .+?\n\n/)
      options[:name] = markdown.match(/^# .+?\n\n/)[0].strip.gsub("# ","").gsub("#","")
    elsif markdown.match?(/^# .+?\n/)
      options[:name] = markdown.match(/^# .+?\n/)[0].strip.gsub("# ","").gsub("#","")
    else
      options[:name] = File.basename(Dir.getwd)
    end    
    options[:file_to_convert] = "README.md"
  end
end

if !options[:file_to_convert]
  options[:file_to_convert] = "README.md"
end

if options[:create_lesson]
  GithubToCanvas.new(mode: "create", 
                    course_id: options[:course_id], 
                    filepath: Dir.pwd, 
                    file_to_convert: options[:file_to_convert],
                    branch: options[:branch], 
                    name: options[:name], 
                    type: options[:type], 
                    illumidesk: !!options[:illumidesk],
                    grading_type: options.fetch(:grading_type, 'pass_fail'),
                    submission_type: options.fetch(:submission_type, 'online_url'),
                    points_possible: options.fetch(:points_possible, 1),
                    save_to_github: !!options[:save_to_github], 
                    fis_links: !!options[:fis], 
                    git_links: !!options[:git_links],
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    only_update_content: !!options[:only_content],
                    forkable: !!options[:forkable],
                    aaq: !!options[:aaq],
                    prework: !!options[:prework],
                    header_only: !!options[:header_only])
end

if options[:align]
  GithubToCanvas.new(mode: "align", 
                    course_id: options[:course_id], 
                    id: options[:id],
                    filepath: Dir.pwd,
                    file_to_convert: options[:file_to_convert], 
                    branch: options[:branch],
                    name: options[:name],
                    type: options[:type],
                    illumidesk: !!options[:illumidesk],
                    grading_type: options.fetch(:grading_type, 'pass_fail'),
                    submission_type: options.fetch(:submission_type, 'online_url'),
                    points_possible: options.fetch(:points_possible, 1),
                    save_to_github: !!options[:save_to_github], 
                    fis_links: !!options[:fis],
                    git_links: !!options[:git_links], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    only_update_content: !!options[:only_content],
                    forkable: !!options[:forkable],
                    aaq: !!options[:aaq],
                    prework: !!options[:prework],
                    header_only: !!options[:header_only])
end